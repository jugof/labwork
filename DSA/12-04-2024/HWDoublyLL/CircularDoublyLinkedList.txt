package doubly;

public class Node {

    int data;
    Node left;
    Node right;

    public Node() {
        
    }

    public Node(int data) {
        this.data = data;
        this.left = null;
        this.right = null;
    }
}

====================================================================================================

package doubly;

public class CircularDoublyLL {
    Node root;
    Node tail;

    public void insert_left(int element) {
        Node newNode = new Node(element);
        if(root == null) {
            root = newNode;
            tail = newNode;
        }
        else{
            newNode.right = root;
            root.left = newNode;
            root = newNode;
            tail.right = root;
        }
    }

    public void insert_right(int element) {
        Node newNode = new Node(element);
        if(root == null) {
            root = newNode;
            tail = newNode;
        }
        else{
            newNode.left = tail;
            tail.right = newNode;
            tail = newNode;
            tail.right = root;
            root.left = tail;
        }
    }

    public void delete_left(){
        if(root == null) {
            System.out.println("List is empty");
        }
        else{
            Node temp = root;
            root = root.right;
            root.left = tail;
            temp.right = null;
            tail.right = root;
        }
    }

    public void delete_right(){
        if(root == null) {
            System.out.println("List is empty");
        }
        else if(root.right == null && root.left == null) {
            root = null;
        }
        else{
            Node temp = tail.left;
            temp.right = root;
            root.left = temp;
            tail.left = null;
            tail.right = null;
            tail = temp;
        }
    }

    public void print_normal(){
        Node temp = root;
        do {
            System.out.print(temp.data + " ");
            temp = temp.right;
        }while(temp != root);
        System.out.println();
    }

    public void print_reverse(){
        Node temp = tail;
        do {
            System.out.print(temp.data + " ");
            temp = temp.left;
        } while(temp != tail);
    }
}
  

=======================================================================================================


import java.util.Scanner;

import doubly.CircularDoublyLL;

public class CircularDLLProgram {
    public static void main(String[] args) {
        CircularDoublyLL dll = new CircularDoublyLL();
        
        int choice = 0;
        int val;
        Scanner in = new Scanner(System.in);
        do{
            System.out.println("1. Insert Left \n 2. Insert Right \n 3. Delete Left \n 4. Dlete right \n 5. Print DoublyLL Normally \n 6. Print DoublyLL Reversed \n 0. Exit");
            choice = in.nextInt();
            switch (choice) {
                case 1:
                    System.out.println("Enter the value to insert at left");
                    val = in.nextInt();
                    dll.insert_left(val);    
                    break;
                
                case 2:
                    System.out.println("Enter the value to insert at right");
                    val = in.nextInt();
                    dll.insert_right(val);    
                    break;

                case 3:
                    dll.delete_left();
                    break;
                
                case 4:
                    dll.delete_right();
                    break;

                case 5:
                    System.out.println("Printing the Circular Doubly Linked List Normally");
                    dll.print_normal();  
                    break;

                case 6:
                    System.out.println("Printing the Circular Doubly Linked List Reversed");
                    dll.print_reverse();
                    break;

                case 0: 
                    System.out.println("Exiting...");
                    break;

                default:
                    System.out.println("Invalid choice");
                    break;
            }
        }while(choice != 0);        
    }
}

